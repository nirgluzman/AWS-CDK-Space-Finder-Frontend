import { type CognitoUser } from '@aws-amplify/auth';
import { Amplify, Auth } from 'aws-amplify';
import {
  CognitoIdentityClient,
  GetCredentialsForIdentityCommand,
  GetIdCommand,
  Credentials,
} from '@aws-sdk/client-cognito-identity';

import { AuthStack } from '../../../space-finder/outputs.json';

// Initialize the Amplify library and configure it to connect to AWS account and resources.
// https://docs.amplify.aws/lib/client-configuration/configuring-amplify-categories/q/platform/js/
Amplify.configure({
  Auth: {
    mandatorySignIn: false, // users are not allowed to get the aws credentials unless they are signed-in
    region: AuthStack.awsRegion, // Amazon Cognito region
    userPoolId: AuthStack.SpaceUserPoolId, // Amazon Cognito User Pool ID
    userPoolWebClientId: AuthStack.SpaceUserPoolClientId, // Amazon Cognito App Client ID
    identityPoolId: AuthStack.SpaceIdentityPoolId, // Amazon Cognito Identity Pool ID
    authenticationFlowType: 'USER_PASSWORD_AUTH', // authentication flow type -  users to provide their username and password to the application
  },
});

export class AuthService {
  private user: CognitoUser | undefined;

  public jwtIdToken: string | undefined;
  private temporaryCredentials: Credentials | undefined;

  // user login status check
  public isLogin() {
    if (this.user) {
      return true;
    }
    return false;
  }

  // https://docs.amplify.aws/lib/auth/emailpassword/q/platform/js/#auto-sign-in-after-sign-up
  public async login(userName: string, password: string): Promise<Object | undefined> {
    try {
      this.user = (await Auth.signIn(userName, password)) as CognitoUser;

      // extract the JWT ID token from the Cognito User object.
      const idToken = this.user?.getSignInUserSession()?.getIdToken();
      this.jwtIdToken = idToken?.getJwtToken();

      return this.user;
    } catch (error) {
      console.error('error signing in', error);
      return undefined;
    }
  }

  public getUserName() {
    return this.user?.getUsername(); // CognitoUser class method
  }

  private async generateTemporaryCredentials() {
    // https://docs.aws.amazon.com/AWSJavaScriptSDK/v3/latest/clients/client-cognito-identity/classes/getidcommand.html
    // https://docs.aws.amazon.com/AWSJavaScriptSDK/v3/latest/clients/client-cognito-identity/classes/getcredentialsforidentitycommand.html

    // construct the Cognito Identity Pool URL.
    const cognitoIdentityPool = `cognito-idp.${AuthStack.awsRegion}.amazonaws.com/${AuthStack.SpaceUserPoolId}`;

    // create a new CognitoIdentityClient object.
    const cognitoIdentityClient = new CognitoIdentityClient({ region: AuthStack.awsRegion });

    // identity ID is a unique identifier for a user in a Cognito identity pool.
    // It is a string that is generated by the Cognito Identity service and is used to identify the user to the Cognito Identity service
    const identityId = (
      await cognitoIdentityClient.send(
        new GetIdCommand({
          IdentityPoolId: AuthStack.SpaceIdentityPoolId,
          Logins: {
            [cognitoIdentityPool]: this.jwtIdToken!,
          },
        })
      )
    ).IdentityId;

    const credentials = (
      await cognitoIdentityClient.send(
        new GetCredentialsForIdentityCommand({
          // get temporary credentials for a user in a Cognito identity pool, by assuming the role that is associated with the identity pool.
          IdentityId: identityId, // identity ID of the user in the Cognito identity pool.
          Logins: {
            // a map of identity provider names to login tokens (to authenticate the user and to authorize the user to access the Cognito identity pool).
            [cognitoIdentityPool]: this.jwtIdToken!,
          },
        })
      )
    ).Credentials;

    return credentials;
  }

  public async getTemporaryCredentials(): Promise<Credentials | undefined> {
    // if temporary credentials has already been generated, return them.
    if (this.temporaryCredentials) {
      return this.temporaryCredentials;
    }

    // if the user has not signed-in, return undefined.
    if (!this.jwtIdToken) {
      return undefined;
    }

    // generate temporary credentials for the signed-in user.
    this.temporaryCredentials = await this.generateTemporaryCredentials();
    return this.temporaryCredentials;
  }
}
